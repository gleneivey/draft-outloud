#!/usr/bin/env ruby

begin # catch any exceptions from anywhere, put stack trace in status file
      # and exit cleanly

  require File.join(File.dirname(__FILE__), '..', 'config', 'application')
  require 'rake'

  DraftOutloud::Application.load_tasks
  DraftOutloud::Application.require_environment!


  ###########################################################################
  #### helpers
  ####

  def classpath(jars)
    "-cp " + jars.map {|j| File.join(@prefix, 'bin', j) }.join(":")
  end


  #### for the status file

  @status_file = ENV['PROCESS_BOOK_STATUS_FILE'] || File.join('public', 'processing-status.html')
  File.open(@status_file, 'w') do |f|
    f.puts "<html>"
    f.puts "  <head>"
    f.puts "    <title>Book Processing Status, started #{Time.now}</title>"
    f.puts "    <style>"
    f.puts "      p {"
    f.puts "        margin-top: 0;"
    f.puts "        margin-bottom: 6px;"
    f.puts "      }"
    f.puts "      h2 {"
    f.puts "        margin-bottom: 4px;"
    f.puts "      }"
    f.puts "      p.time {"
    f.puts "        margin-left: 10px;"
    f.puts "        margin-bottom: 20px;"
    f.puts "      }"
    f.puts "      .config-list p {"
    f.puts "        font-size: 80%;"
    f.puts "        margin-bottom: 2px;"
    f.puts "      }"
    f.puts "      div.config-list {"
    f.puts "        margin-bottom: 20px;"
    f.puts "      }"
    f.puts "      .error {"
    f.puts "        color: red;"
    f.puts "      }"
    f.puts "      pre {"
    f.puts "        padding: 5px;"
    f.puts "        margin-left: 30px;"
    f.puts "        margin-right: 30px;"
    f.puts "        background-color: #eee;"
    f.puts "      }"
    f.puts "      pre.exception {"
    f.puts "        border: 2px solid red;"
    f.puts "      }"
    f.puts "      p.exception {"
    f.puts "        color: #ff2020;"
    f.puts "      }"
    f.puts "      p.executing tt {"
    f.puts "        font-weight: bold;"
    f.puts "      }"
    f.puts "    </style>"
    f.puts "  </head>"
    f.puts "  <body>"
    f.puts "    <h2>Processing Information from Book Repository</h2>"
    f.puts "    <p class='time'>#{Time.now}</p>"
    f.fsync
  end

  def time
    Time.now.strftime('%Y-%m-%d %H:%M:%S') + ": "
  end

  def status(message, classname='')
    File.open(@status_file, 'a') do |f|
      f.puts "    <p class='#{classname}'>"
      f.puts "      " + time + message
      f.puts "    </p>"
      f.fsync
    end
  end

  def executing(message)
    File.open(@status_file, 'a') do |f|
      f.puts "    <p class='executing'>"
      f.puts "      #{time}"
      f.puts "      executing$ <tt>#{message}</tt>"
      f.puts "    </p>"
      f.fsync
    end
  end

  def done(status_code)
    File.open(@status_file, 'a') do |f|
      f.puts "    <p>#{time} Exiting with status code <b>#{status_code}</b>.</p>"
      f.puts "    <h3>Done</h3>"
      f.puts "  </body>"
      f.puts "</html>"
      f.fsync
    end
    exit status_code
  end

  def fail(message, id)
    status message
    puts message
    done id
  end

  def execute_done_on_failure(command, id, ok_status = [])
    ok_status += [0]

    File.open(@status_file, 'a') do |f|
      f.puts "    <p>#{time} Running command &mdash;<br/>"
      f.puts "      <tt>#{command}</tt></p>"
      f.fsync
    end

    output = `(#{command}) 2>&1`
    exit_status = $?.exitstatus

    File.open(@status_file, 'a') do |f|
      f.puts "    <pre>"
      f.puts "      #{output}"
      f.puts "    </pre>"
      f.fsync
    end

    unless ok_status.include? exit_status
      status "FAILED with exit code #{exit_status}", 'error'
      puts "FAILED with exit code #{exit_status}"
      done id
    end
  end

  def saxon_command
    "java #{@xmx} " +
      classpath(%w( . saxon.jar resolver.jar xercesImpl.jar )) +
      " -Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl " +
      " -Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl " +
      " -Dorg.apache.xerces.xni.parser.XMLParserConfiguration=" +
          "org.apache.xerces.parsers.XIncludeParserConfiguration " +
      " com.icl.saxon.StyleSheet " +
      " -x org.apache.xml.resolver.tools.ResolvingXMLReader " +
      " -y org.apache.xml.resolver.tools.ResolvingXMLReader " +
      " -r org.apache.xml.resolver.tools.CatalogResolver "
  end

  def xslt_arguments
    " target.database.document=book-site-pdf.xml " +
    " current.docid=book"
  end


  def first_non_div_tag_under(parent_node)
    parent_node.children.each do |node|
      if node.type == 1 && node.name != 'div'
        return node
      else
        maybe_node = first_non_div_tag_under node
        return maybe_node if maybe_node
      end
    end

    nil
  end


  ###########################################################################
  #### get book repository and check-out desired book version
  ####

  @xmx = "-Xmx#{ ENV['PROCESS_BOOK_JAVA_MEMORY'] || '750m' }"

  home = File.expand_path('../..', __FILE__)
  @prefix = File.join(home, 'toolchain-docbook')

  no_xml = false
  while ((argument = ARGV.shift) && (argument =~ /^--/))
    case argument
      when '--no-xml'
        no_xml = true
    end
  end
  git_url = argument
  checkout_target = ARGV.shift

  File.open(@status_file, 'a') do |f|
    f.puts "    <div class='config-list'>"
    f.puts "      <p>#{Time.now}</p>"
    f.puts "      <p><b>GIT URL</b>: #{git_url}</p>"
    f.puts "      <p><b>CHECKOUT TARGET</b>: #{checkout_target}</p>"
    f.puts "      <p><b>NO XML</b>: #{no_xml}</p>"
    f.puts "      <p><b>JAVA MEMORY</b>: #{@xmx}</p>"
    f.puts "      <p><b>HOME</b>: #{home}</p>"
    f.puts "      <p><b>PREFIX</b>: #{@prefix}</p>"
    f.puts "    </div>"
    f.fsync
  end


  # make sure we have a repo
  execute_done_on_failure("git clone #{git_url} book-repo", 1) unless File.exists?('book-repo')

  # check out the requested version
  execute_done_on_failure "cd book-repo && git pull && git checkout #{checkout_target}", 2


  ###########################################################################
  #### do processing steps that move data from repository to working directory
  ####


  customizations = Customization.all
  fail("no customization info in database", 3) unless customizations
  fail("should only have one customization record", 4) unless customizations.length == 1
  customization = customizations.first
  book_root_file_path = customization.book_root_file_path
  book_file_name = File.basename(book_root_file_path, '.xml')
  xml_file = File.join('book-repo', book_root_file_path)
  fo_file  = File.join('book-working', 'book.fo')
  pdf_file = File.join('book-working', book_file_name + '.pdf')

  unless no_xml
    @content_update = ContentUpdate.create! :checkout_target => checkout_target

    # validate book's content against DocBook Relax-NG schema
    command = "java #{@xmx} -jar #{File.join(@prefix, 'bin', 'jing.jar')} " +
                "-C #{File.join(@prefix, 'schema', 'catalog.xml')} " +
                "#{File.join(@prefix, 'schema', 'docbook.rng')}"
    execute_done_on_failure "#{command} #{xml_file}", 5


    # transform book XML into FO
    command = saxon_command
    command += " -o #{fo_file} "
    command += xml_file
    command += " #{File.join(@prefix, 'style', 'pdf.xsl')} "
    command += xslt_arguments
    execute_done_on_failure(command, 6)

    # transform book FO into monolithic PDF
    command = "java #{@xmx} "
    command += classpath %w( fop.jar fop-hyph.jar avalon-framework.jar batik-all.jar commons-io.jar
                             commons-logging.jar xmlgraphics-commons.jar )
    command += " org.apache.fop.cli.Main "
    command += " -q "
    command += " -fo #{fo_file} "
    command += " -pdf #{pdf_file}"
    execute_done_on_failure(command, 7)

    # transform book XML into monolithic HTML
    command = saxon_command
    command += xml_file
    command += " #{File.join(@prefix, 'style', 'onechunk.xsl')} "
    command += xslt_arguments
    execute_done_on_failure(command, 8)



    #### digest HTML for book into our local database

    monolithic_html_file_name = File.join('output', 'index.html')
    monolithic_html_content = IO.read monolithic_html_file_name
    monolithic_html = Nokogiri::HTML monolithic_html_content do |config|
      config.noent.xinclude.noblanks.nocdata.nonet.strict
    end

    # process document, do depth-first recursion to find all TOC entry elements
    TOC_CLASSES = %w(
        set book part chapter appendix bridgehead glossary index sidebar
        sect1 sect2 sect3 sect4 sect5 section simplesect
    )
    def toc_elements_from_html_to_db(parent_node)
      parent_node.children.each do |node|
        if node.type == 1 && node.name == 'div' &&
            TOC_CLASSES.include?(node['class']) && node['title'].present?
          anchor = node.css('a').first
          tag = first_non_div_tag_under node
          if tag
            indent_level = 20
            name = tag.name
            if name == 'h1'
              indent_level = case node['class']
                when 'part'
                  0
                when 'book'
                  -1
                when 'set'
                  -2
                else
                  19
              end
            elsif name == 'h2'
              indent_level = case node['class']
                when 'chapter', 'appendix', 'glossary', 'index'
                  1
                else
                  2
              end
            elsif name =~ /^h(\d+)$/
              indent_level = $1.to_i
            end
          end

          TocEntry.create!(
              :content_update => @content_update,
              :docbook_element => node['class'],
              :entry_text => node['title'],
              :html_anchor => anchor ? anchor['id'] : nil,
              :indent_level => indent_level
          )
        end
        toc_elements_from_html_to_db node
      end
    end

    toc_elements_from_html_to_db monolithic_html.css('body').first


    # normalize indentation numbers for imported TOC items
    toc_entries = @content_update.toc_entries
    used_levels = toc_entries.each.map(&:indent_level).uniq.sort
    toc_entries.each do |entry|
      old_level = entry.indent_level
      new_level = old_level <= 15 ? used_levels.index(old_level) : nil
      entry.update_attribute(:indent_level, new_level)
    end


    #### there should be no possibility of errors/failures after this point
    @content_update.update_attribute(:successful, true)


    ##########################################################################
    #### copy processing results from working to cache
    ####

    copy_to = File.join('public', book_file_name + '.pdf')
    executing "cp #{pdf_file} #{copy_to}"
    FileUtils.copy pdf_file, copy_to

    copy_to = File.join('public', book_file_name + '.html')
    executing "cp #{monolithic_html_file_name} #{copy_to}"
    FileUtils.copy monolithic_html_file_name, copy_to
  end

  #### copy information from the repository to the cache
  ####

  if File.exists?(File.join('book-repo', 'web', 'public'))
    copy_from = File.join('book-repo', 'web', 'public')
    executing "cp -r #{copy_from} ."
    FileUtils.cp_r copy_from, '.'
  end

  web_fragments = File.join('book-cache', 'web', 'fragments')
  FileUtils.mkpath web_fragments
  %w( page_footer.html ).each do |fragment|
    copy_from = File.join('book-repo',  'web', 'fragments', fragment)
    executing "cp #{copy_from} #{web_fragments}"
    FileUtils.copy copy_from, web_fragments
  end




  done 0
rescue => e
  if @status_file
    File.open(@status_file, 'a') do |f|
      f.puts "    <p class='exception'>"
      f.puts "      #{time}"
      f.puts "      <b>Got exception:</b>"
      f.puts "      #{e.message}"
      f.puts "    </p>"
      f.puts "    <pre class='exception'>"
      f.puts "      " + e.backtrace.join("\n")
      f.puts "    </pre>"
      f.fsync
    end

    done 999
  else
    puts e.message
    puts e.backtrace.join("\n")
    exit 998
  end
end
